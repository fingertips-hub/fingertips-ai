name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: windows-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Publish to GitHub Releases
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:win -- --publish always

      - name: Get version and tag message
        id: tag
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          git fetch --tags --force
          TAG_MESSAGE=$(git tag -l --format='%(contents)' ${GITHUB_REF#refs/tags/})
          if [ -z "$TAG_MESSAGE" ]; then
            TAG_MESSAGE="Release ${GITHUB_REF#refs/tags/}"
          fi
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update release and publish
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const message = `${{ steps.tag.outputs.message }}`;

            // Á≠âÂæÖ‰∏ÄÂ∞èÊÆµÊó∂Èó¥Á°Æ‰øù release Â∑≤ÂàõÂª∫
            await new Promise(resolve => setTimeout(resolve, 5000));

            try {
              const { data: release } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              
              console.log(`Found release: ${release.name} (ID: ${release.id})`);
              console.log(`Release draft status BEFORE: ${release.draft}`);
              console.log(`Release prerelease status BEFORE: ${release.prerelease}`);
              
              // Êõ¥Êñ∞ releaseÔºöËÆæÁΩÆÊèèËø∞„ÄÅÁ°Æ‰øù‰∏çÊòØËçâÁ®ø„ÄÅ‰∏çÊòØÈ¢ÑÂèëÂ∏É
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
                body: message,
                draft: false,        // Á°Æ‰øù‰∏çÊòØËçâÁ®ø
                prerelease: false    // Á°Æ‰øù‰∏çÊòØÈ¢ÑÂèëÂ∏É
              });
              
              console.log('‚úÖ Release updated successfully');
              console.log('   - Draft: false (published)');
              console.log('   - Prerelease: false');
              console.log('   - Description updated');
              
              // ÂàóÂá∫ release ‰∏≠ÁöÑÊâÄÊúâËµÑÊ∫ê
              const { data: assets } = await github.rest.repos.listReleaseAssets({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
              
              console.log('\nüì¶ Release assets:');
              assets.forEach(asset => {
                console.log(`  - ${asset.name} (${(asset.size / 1024 / 1024).toFixed(2)} MB)`);
              });
              
              if (assets.length === 0) {
                console.warn('‚ö†Ô∏è  No assets found! Build might have failed to upload.');
              }
            } catch (error) {
              console.error('‚ùå Error updating release:', error);
              throw error;  // Â§±Ë¥•Â∫îËØ•ËÆ©Â∑•‰ΩúÊµÅÂ§±Ë¥•
            }
